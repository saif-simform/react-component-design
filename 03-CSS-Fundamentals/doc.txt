CSS : Cascading Styles Sheets

CSS describes the visual style and presentation of the content written in HTML

h1 {
    color:red
}
Here --->
h1 -> Is known as Selector
{} -> Declaration Block
color -> Property
red -> Value

Types of CSS : 
1. Inline CSS

EX: <h1 style ="color:red"> Inline CSS </h1>

2. Internal CSS

EX: We declare style block inside teh <head> block

<head>
<style>
h1 {
    color: red
}
</style>
</head>

3. External CSS

EX: We create a separate file that contail all CSS declaration.
styles.css

##Conflict in CSS
--> When we have multiple selector for the same element then based on the selector priority CSS handle the Conflict.

Ex: <p id="conflict" class="css-conflict">CSS Conflict</p>

.css-conflict {
    font-style:italic;
    font-size:18px;
}

#conflict {
    font-size: 20px;
}

p {
    font-size:22px
    color:red
}

--> By default all CSS property will apply whether it's class,id,or element.
--> for conflict property CSS use selector priority to resolve it.

1 (higher) - Id (#) Selector, It multiple then last code applies

2- Class (.) or pseudo-class (:) selector

3 (lowest) - Element selector (p,div,li, etc)

4- Universal selector (*)

In the above code `font-size` is conflict property so final size would be selected Id(#) selector as 20px
We can make any selector as higher priority by using !importants keyword

p{
    font-size: 22px !importants
}

Padding : Invisible space around the content, inside of the element.

Margin : Space outside of the element, between element.

## Types of Boxes

1. Inline Boxes : The inline boxes occupies space only necessary for its content.
-> height,width property will not work for inline element.
-> Padding and Margin are applied only horizontally (left,right)
-> We can change inline boxes to block level boxes by using CSS property: `display:block`
-> With CSS block to inline : display: inline

Ex:  a,img,strong,em,button, etc.


2. Block level boxes: It will take block level length(take horizontal space) and create a line break after that, which means they cann't be side by side one another.
-> Element are formatted visually as blocks.
-> Elements occupy 100% of parent elements width,no matter the content.
-> Elements are stacked vertically by default, one after another.

Ex: body,main,header,footer,section,nav,aside,div,h1-h6,p,ul,ol,li, etc

3. Inline-Block Boxes : 
-> Looks like inline from the outside, behave like block-level on the inside.
-> occupies only contents space.
-> Causes no line-breaks.

CSS : display: inline-block

## Positioning mode

1. Normal Flow :
-> Default Positioning
-> Elements is "in flow"
-> Elements are simply laid out according to their order in the HTML code.

Default Positioning : position: relative

2. Absolute Positioning: 
-> It allows to position any element in the flow.
-> Element is removed from the normmal flow:"out of flow"
-> No impact on surrounding elements, might overlap them.
-> We can use top,bottom,right,left to offset the element from its "relatively positioned container".
-> To absolutely position any element the parent container should be position relative(position:relative).

CSS: position: absolute

## Psuedo Elements:
-> We can declare as : h1::after{}
-> Ex: first-child,last-child,first-line,after,before

##Psuedo Class: 
-> We can declare as : li:first-child{}
->Ex: first-child,last-child,nth-child